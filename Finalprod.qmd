---
title: "Data Analyst jobs"
output: html_document
fig.show: 'hide'
---

```{r,echo=FALSE,message=FALSE,warning=FALSE}
library(ggplot2)
library(dplyr)
library(readr)
library(tidyr)
library(stringr)
library(plotly)
library(wordcloud)
library(psych)
library(ggExtra)
library(gridExtra)
library(rmarkdown)
library(patchwork)
```

```{r,,echo=FALSE,message=FALSE,warning=FALSE}
data<-read.csv("DataAnalyst.csv")
#View(data)
dim(data)
# 2253 rows and 15 columns
data<-data[,-1]
```

```{r,echo=FALSE,message=FALSE}
# Replace -1 with NA
data[data == -1] <- NA

# Replace -1.0 with NA
data[data == -1.0] <- NA

# Replace '-1' with NA
data[data == '-1'] <- NA

```

```{r,echo=FALSE}
library(dplyr)

data <- data %>%
  mutate(Job.Title = case_when(
    Job.Title %in% c('Sr. Data Analyst', 'sr. data analyst', 'Sr Data Analyst', 'sr data analyst', 'senior data analyst', 'Senior Data Analyst', 'Data Analyst III', 'data analyst iii', 'senior data analyst') ~ 'Senior Data Analyst',
    Job.Title %in% c('Data Analyst I', 'data analyst i', 'Data Analyst Junior', 'data analyst junior', 'Junior Data Analyst', 'Junior Data AnalystI', 'Junior Data Analystl') ~ 'Junior Data Analyst',
    Job.Title %in% c('Data Analyst II', 'data analyst ii', 'Middle Data Analyst') ~ 'Middle Data Analyst',
    TRUE ~ Job.Title))  
```

```{r,echo=FALSE}
df<-data
library(readr)
library(tidyr)

df <- df %>%
  separate(Salary.Estimate, into = c("min_value", "max_value"), sep = "-")
# Extracting numbers only
df$min_salary <- parse_number(df$min_value)
df$max_salary <- parse_number(df$max_value)

# Removing company name, location, min_value and max_value in cleaner3
df <- df %>% 
  select(-min_value,-max_value, )
# Multiplying min_salary and max_salary by 1000
df$min_salary_k <- df$min_salary * 1000
df$max_salary_k <- df$max_salary * 1000
# Removing min_salary and max_salary
df <- df %>% 
  select(-min_salary, -max_salary)
# Creating Average Salary column
df$average_salary = (df$min_salary_k + df$max_salary_k)/2
```

```{r,echo=FALSE}
library(stringr)

df$SQL <- str_detect(df$Job.Description, "SQL")
df$Python <- str_detect(df$Job.Description, "Python")
df$R <- str_detect(df$Job.Description, "\\bR\\b")  
df$Tableau <- str_detect(df$Job.Description, "Tableau")
df$PowerBI <- str_detect(df$Job.Description, "PowerBI|Power BI")
df$Excel <- str_detect(df$Job.Description, "Excel")
df$Java <- str_detect(df$Job.Description, "Java")
df$AWS <- str_detect(df$Job.Description, "AWS")
df$Spark <- str_detect(df$Job.Description, "Spark")
df$PowerPoint <- str_detect(df$Job.Description, "PowerPoint")
df$Snowflake <- str_detect(df$Job.Description, "Snowflake")
df$Hadoop <- str_detect(df$Job.Description, "Hadoop")
df$VBA <- str_detect(df$Job.Description, "VBA")
df$Azure <- str_detect(df$Job.Description, "Azure")
df$Scala <- str_detect(df$Job.Description, "Scala")
df$Kafka <- str_detect(df$Job.Description, "Kafka")
df$Looker <- str_detect(df$Job.Description, "Looker")
df$Word <- str_detect(df$Job.Description, "Word")

# Creating Degree Indices
df$Bachelor <- str_detect(df$Job.Description, "Bachelor")
df$Master <- str_detect(df$Job.Description, "Master")
df$No_Degree <- !str_detect(df$Job.Description, "Bachelor") &
  !str_detect(df$Job.Description, "Master")
```


```{r,echo=FALSE}
# Creating Job Title Indices

library(stringr)

df$Science <- str_detect(df$Job.Title, "Science|Scientist")
df$Business <- str_detect(df$Job.Title, "Business")
df$Engineer <- str_detect(df$Job.Title, "Engineer")

```

```{r,echo=FALSE}
skills_df <- data.frame(
  skills = c("SQL", "Python", "R", "Excel", "Tableau", "PowerBI", "PowerPoint", "Word", "Azure", "Java", "Spark", "Snowflake", "Hadoop", "VBA", "Scala", "Kafka", "Looker")
)

skills_df <- skills_df %>%
  mutate(
    mean_salary = sapply(skills, function(skill) {
      round(mean(df$average_salary[df[[skill]] == TRUE], na.rm = TRUE), 2)
    })
  )
skills_df <- skills_df %>%
  mutate(
    percentage = sapply(skills, function(skill) {
      round(sum(df[[skill]] == TRUE)/2253*100, 2)
    })
  )
```

```{r,echo=FALSE}
degree_df <- data.frame(degree = c("bachelor", "master", "no_degree"),
                     mean_salary = c(round(mean(df$average_salary[df$Bachelor == "TRUE"],na.rm = TRUE)), 
                                     round(mean(df$average_salary[df$Master == "TRUE"],na.rm = TRUE)), 
                                     round(mean(df$average_salary[df$No_Degree == "TRUE"],na.rm = TRUE))),
                     percentage = c(round(sum(df$Bachelor == "TRUE")/2253*100, 2), 
                                    round(sum(df$Master == "TRUE")/2253*100, 2), 
                                    round(sum(df$No_Degree == "TRUE")/2253*100, 2)))
```

```{r,echo=FALSE}
job_df <- data.frame(Field = c("Science", "Business", "Engineer"),
                     mean_salary = c(round(mean(df$average_salary[df$Science == "TRUE"])), 
                                     round(mean(df$average_salary[df$Business == "TRUE"])), 
                                     round(mean(df$average_salary[df$Engineer == "TRUE"]))),
                                     
                     percentage = c(round(sum(df$Science == "TRUE")/2253*100, 2), 
                                    round(sum(df$Business == "TRUE")/2253*100, 2), 
                                    round(sum(df$Engineer == "TRUE")/2253*100, 2)))
                                    
```

```{r,,echo=FALSE,message=FALSE,warning=FALSE}
```


```{r,,echo=FALSE,message=FALSE,warning=FALSE}
df_new<-df
```


```{r,echo=FALSE}
library(ggplot2)
a<-ggplot(data = skills_df, aes(x = percentage, y = reorder(skills, percentage), fill = reorder(skills, percentage))) +
  geom_col() +
geom_text(aes(label = percentage), hjust = 0, colour = "Black") +
theme(legend.position="none") +
  labs(x = "Occurrence (%)", y = "Skills",
       title ="Skills vs Percentage of Occurrence",
       subtitle = "Which skills are requested most?",
       caption = "According to data on glassdoor .
       https://www.kaggle.com/datasets/andrewmvd/data-analyst-jobs")
```

```{r,echo=FALSE,message=FALSE,warning=FALSE}
skills_df <- skills_df %>%
  arrange(desc(percentage), desc(mean_salary))

b<-ggplot(data = skills_df, aes(x = mean_salary, y = reorder(skills,percentage), fill =mean_salary)) +
  geom_col() +
  geom_text(aes(label = mean_salary), hjust = 1.25, colour = "white") +
theme(legend.position="none") +
  labs(x = "Average Salary", y = "Skills",
       title ="Skills vs Salary",
       subtitle = "Which skills are compensated best?",
       caption = "According to data on glassdoor .
       https://www.kaggle.com/datasets/andrewmvd/data-analyst-jobs")
```

```{r,echo=FALSE}
grid.arrange(a, b, ncol = 2)
```

```{r,echo=FALSE,message=FALSE,warning=FALSE}
# Degree vs Occurrence plot
c<-ggplot(data = degree_df, aes(x = percentage, y = reorder(degree, percentage), fill = reorder(degree, percentage))) +
  geom_col() +
geom_text(aes(label = percentage), hjust = 2, colour = "white") +
theme(legend.position="none") +
  labs(x = "Occurrence (%)", y = "Degree",
       title ="Degree vs Percentage of Occurence",
       subtitle = "Which degree are requested most?",
       caption = "According to data  on glassdoor .
       https://www.kaggle.com/datasets/andrewmvd/data-analyst-jobs")
```

```{r,echo=FALSE,message=FALSE,warning=FALSE}
d<-ggplot(data = degree_df, aes(x = mean_salary, y = reorder(degree, mean_salary), fill = reorder(degree, mean_salary))) +
  geom_col() +
geom_text(aes(label = mean_salary), hjust = 2, colour = "white") +
theme(legend.position="none") +
  labs(x = "Average Salary", y = "Degree",
       title ="Degree vs Salary",
       subtitle = "Which degree are compensated best?",
       caption = "According to data  on glassdoor .
       https://www.kaggle.com/datasets/andrewmvd/data-analyst-jobs")
```

```{r,echo=FALSE}
grid.arrange(c, d, ncol = 2)
```
### Wordlcoud of JobTitle
```{r,echo=FALSE}
library(wordcloud)
job_title <- na.omit(data$`Job.Title`)

suppressWarnings({
  
  par(mar = c(0, 0, 0, 0))

  # Create a word cloud
  wordcloud(words = job_title, scale=c(3, 0.5), min.freq=1, random.order=FALSE, colors=brewer.pal(8, "Dark2"),width=15)
})
```

```{r,echo=FALSE}
library(plotly)



# Create a table to count occurrences of each job title
job_title_counts <- table(df$`Job.Title`)

# Extract the top 20 job titles and their counts
top_job_titles <- names(sort(job_title_counts, decreasing = TRUE))[1:20]
top_job_counts <- job_title_counts[top_job_titles]

 plot_ly(
  x = top_job_titles,
  y = top_job_counts,
  type = 'scatter',
  mode = 'markers+text+lines',
  marker = list(color = 'blue', size = 10),
  text = top_job_counts,
  textposition = 'top center',
  line = list(color = 'red', dash = 'dash'),
  name = 'Number of Job Openings'
) %>%
  layout(
    title = "<b>Number of Job Openings by Job titles</b>",
    xaxis = list(title = "<b>Job Titles</b>", showgrid = TRUE),
    yaxis = list(title = "<b>Number of Job Opening</b>", showgrid = TRUE),
    template = 'seaborn',
    font = list(size = 12, color = 'black', family = "Oswald', sans-serif"),
    yaxis2 = list(showgrid = TRUE, overlaying = 'y', side = 'right', title = '<b>Number of Job Openings</b>'),
    legend = list(
      yanchor = "top",
      y = 1.3,
      xanchor = "left",
      x = 0.78
    )
  )
```

```{r,,echo=FALSE,message=FALSE,warning=FALSE}
library(plotly)


industry_counts <- table(df$Industry)

# Extract the top 20 industries and their counts
top_industries <- names(sort(industry_counts, decreasing = TRUE))[1:20]
top_industry_counts <- industry_counts[top_industries]

 plot_ly(
  y = top_industries,
  x = top_industry_counts,
  type = 'scatter',
  mode = 'markers+text+lines',
  marker = list(color = 'blue', size = 10),
  text = top_industry_counts,
  textposition = 'top center',
  line = list(color = 'red', dash = 'dash'),
  name = 'Number of Job Openings'
) %>%
  layout(
    title = "<b>Number of Job Openings by Industry</b>",
    xaxis = list(title = "<b>Number of Job Openings</b>", showgrid = FALSE),
    yaxis = list(title = "<b>Industry</b>", showgrid = FALSE),
    template = 'seaborn',
    font = list(size = 12, color = 'black', family = "Oswald', sans-serif"),
    yaxis2 = list(showgrid = TRUE, overlaying = 'y', side = 'right', title = '<b>Number of Job Openings</b>'),
    legend = list(
      yanchor = "top",
      y = 1.3,
      xanchor = "left",
      x = 0.78
    )
  )

```

```{r,echo=FALSE,message=FALSE,warning=FALSE}
library(ggplot2)


df11 <- df %>%
  dplyr::group_by(Location) %>%
  dplyr::summarize(Min_Salary = mean(min_salary_k), Max_Salary = mean(max_salary_k)) %>%
  arrange(desc(Max_Salary), desc(Min_Salary)) %>%
  head(20)


p5<-ggplot(df11, aes(x = Location)) +
  geom_bar(aes(y = Min_Salary), stat = "identity", fill = "blue",  position = position_dodge(width = 0.8), alpha = 0.7) +
  geom_bar(aes(y = Max_Salary), stat = "identity", fill = "red",  position = position_dodge(width = 0.8), alpha = 0.7) +
  labs(title = "Top 20 cities with their minimum and maximum salaries") +
  theme_minimal()+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

```{r,echo=FALSE,message=FALSE,warning=FALSE}
job_locations <- as.data.frame(table(df$Location))


colnames(job_locations) <- c("Location", "counts")
job_locations$Location <- as.character(job_locations$Location)


job_locations$state <- sapply(strsplit(job_locations$Location, ','), function(x) tail(x, 1))

top30_data <- head(job_locations[order(job_locations$counts, decreasing = TRUE), ], 30)

hierarchical_data <- data.frame(
  path = paste( top30_data$state, top30_data$Location),
  values = top30_data
)


treemap_plot <- plot_ly(hierarchical_data, 
                        labels = ~path, 
                        parents = ~"All", 
                        values = ~top30_data$counts, 
                        type = "treemap")


treemap_plot <- treemap_plot %>% 
  layout(title = "Top 30 Treemap of Job Locations")


treemap_plot
```

```{r,echo=FALSE,message=FALSE,warning=FALSE}
com <- table(df$`Company.Name`)
company <- data.frame(Company = names(com), Number = as.numeric(com))

options(repr.plot.width = 10, repr.plot.height = 8)
Sys.setenv("plotly_RENDERER" = "svg")

plot_treemap <- function(dataframe, variable, value, top_n = 30) {
  dataframe <- dataframe %>%
    arrange(desc(dataframe[[value]])) %>%
    slice_head(n = top_n)  # Select the top n rows

  fig <- plot_ly(
    data = dataframe,
    labels = ~Company,
    parents = ~"",
    values = ~Number,
    type = 'treemap',
    hoverinfo = 'label+text+value',
    marker = list(colors = RColorBrewer::brewer.pal(8, "Set1"))
  )

  fig <- fig %>% layout(
    title = paste("Top", top_n, "Companies with Number of Jobs"),
    margin = list(l = 0, r = 0, b = 0, t = 30),
    uniformtext = list(minsize = 10, mode = 'hide')
  )

  fig
}

plot_treemap(company, 'Company', 'Number', top_n = 30)


```

### Salary Distributions
```{r,echo=FALSE,message=FALSE,warning=FALSE}
options(repr.plot.width = 10, repr.plot.height = 10)
p1 <- ggplot(df, aes(x = min_salary_k)) +
   geom_histogram(aes(y = ..density..), fill = "skyblue", color = "white", bins = 20) +
  geom_density(color = "red") +
  labs(title = "Min Salary Histogram", x = "Min Salary", y = "Frequency")

p2 <- ggplot(df, aes(x = max_salary_k)) +
    geom_histogram(aes(y = ..density..), fill = "coral", color = "white", bins = 20) +
  geom_density(color = "red") +
  labs(title = "Max Salary Histogram", x = "Max Salary", y = "Frequency")


# Create the layout
layout <- matrix(c(1, 2, 3, 4, 5, 5), 3, 2, byrow = TRUE)

(p1 | p2) /(p5)
```

### Progression Of Ratings and Salary with respect to Industry
```{r,echo=FALSE,message=FALSE,warning=FALSE}


library(plotly)


animated_bubble_chart <- plot_ly(
  df,
  x = ~max_salary_k,
  y = ~Rating,
  size = ~Rating,
  color = ~Industry,
  frame = ~max_salary_k,
  text = ~paste("Industry: ", Industry, "<br>Rating: ", Rating),
  type = 'scatter',
  mode = 'markers'
) %>%
  animation_opts(frame = 500, redraw = TRUE) %>%
  layout(
    title = 'Animated Bubble Chart - Rating Evolution',
    xaxis = list(title = 'Max Salary (in thousands)'),
    yaxis = list(title = 'Rating'),
    showlegend = TRUE
  )

# Display the animated bubble chart
animated_bubble_chart


```
### Salary Comparasions Using Scatter plots and Violin plots
```{r,echo=FALSE,message=FALSE,warning=FALSE}
# Group by sector and calculate median salaries
top_salary_industry <- df %>%
  dplyr::group_by(Industry) %>%
  dplyr::summarize(
    lowest_salary_avg = median(min_salary_k),
    highest_salary_avg = median(max_salary_k)
  ) %>%
  arrange(desc(lowest_salary_avg)) %>%
  filter(!is.na(Industry)) %>%
  slice_head(n = 25)  # Select the top 20 industries


ggplot(top_salary_industry, aes(x = lowest_salary_avg, xend = highest_salary_avg, y = reorder(Industry, lowest_salary_avg))) +
  geom_segment(aes(yend = reorder(Industry, highest_salary_avg)), color = 'dimgrey', alpha = 0.6, size = 2) +
  geom_point(aes(y = reorder(Industry, lowest_salary_avg)), color = 'royalblue', size = 3, label = 'Lowest Salary Average') +
  geom_point(aes(y = reorder(Industry, highest_salary_avg)), color = 'seagreen', size = 3, label = 'Highest Salary Average') +
  scale_y_discrete(limits = rev(top_salary_industry$Industry)) +
  scale_x_continuous(breaks = seq(40, 110, 10), labels = paste0(seq(40, 110, 10), 'K')) +
  labs(title = 'Range of Salary for Data Analyst Jobs by Industry (Top 25)',
       y = 'Industry',
       x = 'Salary ($)'
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(hjust = 1)) +
  geom_text(aes(x = lowest_salary_avg, y = reorder(Industry, lowest_salary_avg),
                label = paste0('$', lowest_salary_avg)), vjust = -0.5, color = 'black', size = 3) +
  geom_text(aes(x = highest_salary_avg, y = reorder(Industry, highest_salary_avg),
                label = paste0('$', highest_salary_avg)), vjust = -0.5, color = 'black', size = 3)

```

```{r,echo=FALSE,message=FALSE,warning=FALSE}

# Assuming df is your data frame
top_salary_sector <- df %>%
  dplyr::group_by(Sector) %>%
  dplyr::summarize(
    lowest_salary_avg = median(min_salary_k),
    highest_salary_avg = median(max_salary_k)
  ) %>%
  dplyr::arrange(desc(lowest_salary_avg)) %>%
  dplyr::filter(!is.na(Sector))  

# Merge the summaries back to the main data frame
df <- left_join(df, top_salary_sector, by = "Sector")

# Create a violin plot
violin_plot <- ggplot(df, aes(x = reorder(Sector, lowest_salary_avg), y = (min_salary_k + max_salary_k) / 2)) +
  geom_violin(trim = FALSE, fill = 'skyblue', color = 'dimgrey', alpha = 0.6) +
  geom_point(aes(y = lowest_salary_avg), color = 'royalblue', size = 3, position = position_dodge(width = 0.75)) +
  geom_point(aes(y = highest_salary_avg), color = 'seagreen', size = 3, position = position_dodge(width = 0.75)) +
  labs(title = 'Distribution of Salary for Data Analyst Jobs by Job Sector',
       y = 'Salary ($)',
       x = 'Job Sector'
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Display the violin plot
print(violin_plot)
```






```{r,echo=FALSE,message=FALSE,warning=FALSE}
library(forcats)
df <- df %>%
  mutate(average_size = recode(Size,
                               "1 to 50 employees" = 25,
                               "10000+ employees" = 10000,
                               "1001 to 5000 employees" = 3000,  # Replace with your own values
                               "201 to 500 employees" = 350,
                               "5001 to 10000 employees" = 7500,  # Replace with your own values
                               "501 to 1000 employees" = 750,    # Replace with your own values
                               "51 to 200 employees" = 125,
                               "Unknown" = NA_real_))
library(dplyr)
```


```{r,echo=FALSE,message=FALSE,warning=FALSE}
library(dplyr)

df <- df %>%
  mutate(average_revenue = case_when(
    Revenue == "$1 to $2 billion (USD)" ~ 1.5e+09,
    Revenue == "$1 to $5 million (USD)" ~ 3e+06,
    Revenue == "$10 to $25 million (USD)" ~ 1.75e+07,
    Revenue == "$10+ billion (USD)" ~ 1e+10,
    Revenue == "$100 to $500 million (USD)" ~ 3.5e+08,
    Revenue == "$2 to $5 billion (USD)" ~ 3.5e+09,
    Revenue == "$25 to $50 million (USD)" ~ 3.75e+07,
    Revenue == "$5 to $10 billion (USD)" ~ 7.5e+09,
    Revenue == "$5 to $10 million (USD)" ~ 7.5e+06,
    Revenue == "$50 to $100 million (USD)" ~ 7.5e+07,
    Revenue == "$500 million to $1 billion (USD)" ~ 7.5e+08,
    Revenue == "Less than $1 million (USD)" ~ 5e+05,
    Revenue == "Unknown / Non-Applicable" ~ NA_real_,
    TRUE ~ NA_real_
  ))



```
### Average Salary, Average Revenue and Average Size 3D Scatter Plot
```{r,echo=FALSE,message=FALSE,warning=FALSE}
library(plotly)



plot_ly(df, x = ~average_salary, y = ~average_size, z = ~average_revenue,
        color = ~Rating, marker = list(size = 8)) %>%
  layout(title = "3D Scatter Plot", scene = list(xaxis = list(title = "Average Salary"),
                                                 yaxis = list(title = "Average Size"),
                                                 zaxis = list(title = "Average Revenue")))
  

```
### Max Salary and Rating with respect to Size
```{r,echo=FALSE,message=FALSE,warning=FALSE}

gg <- ggplot(df, aes(x=Rating, y=max_salary_k)) 
gg + geom_point()
gg1 <- gg + geom_point(aes(color=Size))
gg2 <- gg1 + labs(title="Max Salary vs Ratings", y="max_salary", x="Rating")  # ggtitle("title") also changes the title.
print(gg2)
gg2+ geom_smooth(aes(color=Size)) 
```
### Sector and Average Revenue
```{r,echo=FALSE,message=FALSE,warning=FALSE}
library(ggplot2)

df %>%
  ggplot(aes((average_revenue),Sector , color = (average_revenue))) +
  geom_boxplot() +
  scale_fill_brewer(palette = "Set3") +
  labs(x = "Average_revenue") +
  theme_minimal()+
  theme(legend.position = "none")
  


```


`

